install.packages("rmarkdown")
install.packages("bookdown")
install.packages("rticles")
install.packages("JuliaCall")
install.packages("reticulate")
install.packages("devtools")
install.packages("testthat")
R.version
library(ggplot2)
library(testthat)
knitr::opts_chunk$set(cache = FALSE, fig.width = 7, fig.height = 4,
out.extra = '', out.width = "0.6\\textwidth",
fig.align='center')
set.seed(01011885)
N <- 12 # infected individuals
t <- 20 # study length
# create the matrix to store the simulation data
I <- matrix(data = NA, nrow = t, ncol = N)
# Initialise the population at t = 1 with a fixed configuration
I[1,] <- rep(x = c("a", "b", "c"), length.out = N)
# At each time step, everyone is re-infected
#   by someone from the previous time step.
for(t in seq(2, t)){
I[t,] <- sample(x = I[t-1,], size = N)
}
library(ggplot2)
d1 <- data.frame(time = seq(t), strain = (I[, 1]), stringsAsFactors = TRUE)
ggplot(d1, aes(time, as.numeric(strain))) +
geom_path() +
geom_point() +
scale_y_continuous(breaks = seq(3), labels = c('a', 'b', 'c')) +
labs(y = 'Strain', x = 'Time') +
theme(panel.grid.minor = element_blank())
apply(I, 1, function(x) table(factor(x, levels = c("a", "b", "c")))) %>% t %>% matplot(type = 'l')
apply(I, 1, function(x) table(factor(x, levels = c("a", "b", "c")))) %>%
t %>% matplot(type = 'l')
library(ggplot2)
library(testthat)
knitr::opts_chunk$set(cache = FALSE, fig.width = 7, fig.height = 4,
out.extra = '', out.width = "0.6\\textwidth",
fig.align='center')
set.seed(01011885)
N <- 12 # infected individuals
t <- 20 # study length
# create the matrix to store the simulation data
I <- matrix(data = NA, nrow = t, ncol = N)
# Initialise the population at t = 1 with a fixed configuration
I[1,] <- rep(x = c("a", "b", "c"), length.out = N)
# At each time step, everyone is re-infected
#   by someone from the previous time step.
for(t in seq(2, t)){
I[t,] <- sample(x = I[t-1,], size = N)
}
library(ggplot2)
d1 <- data.frame(time = seq(t), strain = (I[, 1]), stringsAsFactors = TRUE)
ggplot(d1, aes(time, as.numeric(strain))) +
geom_path() +
geom_point() +
scale_y_continuous(breaks = seq(3), labels = c('a', 'b', 'c')) +
labs(y = 'Strain', x = 'Time') +
theme(panel.grid.minor = element_blank())
apply(I, 1, function(x) table(factor(x, levels = c("a", "b", "c")))) %>%
t %>% matplot(type = 'l')
devtools::install_github("hadley/emo")
emo::ji("poop")
emo::ji("bug")
rm(list = ls())
library(ggplot2)
library(testthat)
knitr::opts_chunk$set(cache = FALSE, fig.width = 7, fig.height = 4,
out.extra = '', out.width = "0.6\\textwidth",
fig.align='center')
set.seed(01011885)
N <- 12 # infected individuals
t <- 20 # study length
# create the matrix to store the simulation data
I <- matrix(data = NA, nrow = t, ncol = N)
# Initialise the population at t = 1 with a fixed configuration
I[1,] <- rep(x = c("a", "b", "c"), length.out = N)
# At each time step, everyone is re-infected
#   by someone from the previous time step.
for(t in seq(2, t)){
I[t,] <- sample(x = I[t-1,], size = N)
}
library(ggplot2)
d1 <- data.frame(time = seq(t), strain = (I[, 1]), stringsAsFactors = TRUE)
ggplot(d1, aes(time, as.numeric(strain))) +
geom_path() +
geom_point() +
scale_y_continuous(breaks = seq(3), labels = c('a', 'b', 'c')) +
labs(y = 'Strain', x = 'Time') +
theme(panel.grid.minor = element_blank())
apply(I, 1, function(x) table(factor(x, levels = c("a", "b", "c")))) %>%
t %>% matplot(type = 'l')
N <- 12
t <- 20
I <- matrix(data = NA, nrow = t, ncol = N)
I[1,] <- rep(x = c("a", "b", "c"), length.out = N)
for(t in seq(2, t)){
I[t,] <- sample(x = I[t-1,], size = N, replace = TRUE)
}
(apply(I, 1, function(x) table(factor(x, levels = c("a", "b", "c")))) / N) %>%
t %>%
matplot(type = 'l', xlab = 'Time', ylab = 'Proportion', lwd = 2)
initialisePop <- function(t, N, strains = 3){
I <- matrix(data = NA, nrow = t, ncol = N)
I[1,] <- rep(x = letters[1:strains], length.out = N)
return(I)
}
updatePop <- function(x, t, N){
x[t,] <- sample(x = x[t-1,], size = N, replace = TRUE)
return(x)
}
pop1 <- initialisePop(t = 2, N = 3, strains = 2)
expect_equal(pop1[1,], c("a", "b", "a"))
pop2 <- initialisePop(t = 2, N = 3, strains = 3)
expect_equal(pop2[1,], c("a", "b", "c"))
pop3 <- initialisePop(t = 2, N = 4, strains = 2)
expect_equal(pop3[1,], c("a", "b", "a", "b"))
pop1 <- initialisePop(t = 2, N = 3, strains = 3)
expect_equal(dim(pop1), c(2, 3))
pop2 <- initialisePop(t = 6, N = 3, strains = 3)
expect_equal(dim(pop2), c(6, 3))
pop3 <- initialisePop(t = 2, N = 20, strains = 3)
expect_equal(dim(pop3), c(2, 20))
pop4 <- initialisePop(t = 2, N = 10, strains = 5)
expect_equal(length(unique(pop4[1,])), 5)
initialisePop <- function(t, N, strains){
I <- matrix(data = NA, nrow = t, ncol = N)
I[1,] <- rep(x = letters[1:strains], length.out = N)
return(I)
}
updatePop <- function(x, t, N){
x[t,] <- sample(x = x[t-1,], size = N, replace = TRUE)
return(x)
}
pop1 <- initialisePop(t = 20, N = 12, strains = 3)
# expect all except the first row are NAs
expect_true(all(is.na(pop1[-1,])))
# expect all 3 strains at t = 1, if strains >= 3
if(strains >= 3){
expect_true(all(c("a", "b", "c") %in% pop1[1,]))
}
pop1
str(popq)
str(pop1)
expect_error(pop <- fullSim(t = 1:100, N = 4))
expect_error(pop <- fullSim(t = 1:100, N = 4))
show_failure(expect_error(pop <- fullSim(t = 1:100, N = 4)))
show_failure(expect_error(pop <- fullSim(t = 1:100, N = 4)))
show_failure(expect_error(pop <- fullSim(t = 1:100, N = 4)))
testthat::show_failure(expect_error(pop <- fullSim(t = 1:100, N = 4)))
testthat::show_failure(expect_error(pop <- fullSim(t = 1:100, N = 4)))
expect_error(pop <- fullSim(t = 1:100, N = 4))
fullSim3 <- function(t, N, strains){
stopifnot(t > 1)
stopifnot(length(t) == 1)
pop <- initialisePop(t, N, strains)
for(i in seq(2, t)){
pop <- updatePop(pop, i, N)
}
return(pop)
}
fullSim3(1:2,4,5)
fullSim3(2:3,4,5)
fullSim3(2,4,5)
T
T <- NULL
T
TRUE
